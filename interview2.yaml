version: 0.3
nodes:
  name:
    agent: textInputAgent
    params:
      message: "インタビューしたい有名人の名前:"
  context:
    agent: stringTemplateAgent
    params:
      template:
        person0:
          name: インタビュアー
          system: あなたはプロのインタビュアーです。
            その人の性格を深掘りし、厳しい質問をするのがあなたの仕事です。
            観客を引き付けるために、一つ一つ質問を投げかけ、
            次の話題に移る前に回答に対して反応してください。
            50字以内で、日本語で回答して。
        person1:
          name: ${0}
          system: あなたは ${0}.
          greeting: やあ, 私は ${0}
    inputs:
      - :name
  # messageの定義
  messages:
    agent: propertyFilterAgent
    params:
      inject:
        # データイメージ
          # {
          #   "role": "system",
          #   "content": "あなたはプロのインタビュアーです。～"
          # },
          # {
          #   "role": "user",
          #   "content": "やあ, 私は tesla"
          # }
        - index: 0
          propId: content
          from: 1
        - index: 1
          propId: content
          from: 2
    inputs:
      - - role: system
        - role: user
      - :context.person0.system
      - :context.person1.greeting
  # ここからチャットのループ
  chat:
    agent: nestedAgent
    # nestedAgentのインプットは２つあって、揃ってないと動かない
    inputs:
      - :messages
      - :context
    params:
      namedInputs:
        - messages
        - context
    graph:
      loop:
        count: 2
      nodes:
        messages:
          value: []
          update: :swappedMessages
        context:
          value: {}
          update: :swappedContext
        llm:
          agent: openAIAgent
          params:
            model: gpt-4o
          # agent: groqAgent
          # params:
          #   model: Llama3-70b-8192
          inputs:
            - null
            - :messages
        output:
          agent: stringTemplateAgent
          params:
            template: "\e[32m${1}:\e[0m ${0}\n"
          console:
            after: true
          inputs:
            - :llm.choices.$0.message.content
            - :context.person0.name
        reducer:
          agent: pushAgent
          inputs:
            - :messages
            - :llm.choices.$0.message
        swappedContext:
          agent: propertyFilterAgent
          params:
            swap:
              person0: person1
          inputs:
            - :context
        swappedMessages:
          agent: propertyFilterAgent
          params:
            inject:
              - propId: content
                index: 0
                from: 1
            alter:
              role:
                assistant: user
                user: assistant
          inputs:
            - :reducer
            - :swappedContext.person0.system
