version: 0.3
loop:
  while: :continue
nodes:
  continue:
    value: true
    update: :checkInput.continue

  userInput:
    agent: textInputAgent
    params:
      message: "悩める社員:"  
    console:
      before: "\e[1;32m■悩んでいること、相談したいことを教えてください:\e[0m"

  checkInput:
    agent: propertyFilterAgent
    params:
      inspect:
        - propId: continue
          notEqual: /bye
    inputs:
      - {}
      - :userInput     

  # name:
  #   agent: textInputAgent
  #   params:
  #     message: "悩める社員:"
  #   console:
  #     before: "悩んでいること、相談したいことを教えてください"      

  context:
    agent: stringTemplateAgent
    params:
      template:
        person0:
          name: プロジェクトマネージャ
          system: >
            あなたはベテランのプロジェクトマネージャです。
            相談者の悩みを聞き、導くのがあなたの仕事です。
            観客を引き付けるために、一つ一つ質問を投げかけ、
            次の話題に移る前に回答に対して反応してください。
            回答は以下2点注意してください。
            1.100字以内で、会話の文章として日本語で回答すること
            2.マークダウン形式は使わないこと。
            
        person1:
          name: 相談者
          system: >
            あなたは仕事に悩んでいるシステムエンジニアです。
            100文字以内で回答して。
          greeting: 私は ${0} について相談したい。
    inputs:
      - :userInput

  # messageの定義
  messages:
    agent: propertyFilterAgent
    params:
      inject:
        - index: 0
          propId: content
          from: 1
        - index: 1
          propId: content
          from: 2
    inputs:
      - - role: system
        - role: user
      - :context.person0.system
      - :context.person1.greeting

  #チャット本体
  chat:
    agent: nestedAgent
    # nestedAgentのインプットは２つあって、揃ってないと動かない
    inputs:
      - :messages
      - :context
    if: :checkInput.continue
    params:
      namedInputs:
        - messages
        - context
    # isResult: true
    
    # 入れ子の処理
    graph:
      loop:
        # ループ回数
        count: 6
      nodes:
        messages:
          value: []
          update: :swappedMessages
        context:
          value: {}
          update: :swappedContext
        llm:
          # agent: openAIAgent
          # params:
          #   model: gpt-4o
          agent: groqAgent
          params:
            model: Llama3-70b-8192
          inputs:
            - null
            - :messages
        output:
          agent: stringTemplateAgent
          params:
            template: "\e[34m>${1}:\e[0m ${0}\n"
          console:
            after: true
          inputs:
            - :llm.choices.$0.message.content
            - :context.person0.name

        reducer:
          agent: pushAgent
          inputs:
            - :messages
            - :llm.choices.$0.message
          isResult: true

        swappedContext:
          agent: propertyFilterAgent
          params:
            swap:
              person0: person1
          inputs:
            - :context
    
        swappedMessages:
          agent: propertyFilterAgent
          params:
            inject:
              - propId: content
                index: 0
                from: 1
            alter:
              role:
                assistant: user
                user: assistant
          inputs:
            - :reducer
            - :swappedContext.person0.system  

  # 最初のネストノードの結果をインプットにした処理
  nestedNode1_result:
    agent: "bypassAgent"
    inputs: [":chat.reducer"]
    # isResult: true

  json:
    agent: jsonParserAgent
    # json形式のデータを元に戻す
    params:
      stringify: true
    isResult: true
    inputs:
      - ":nestedNode1_result"

 # その結果を受けて、別のmapエージェントにインプット
  nestedNode2:
    agent: "mapAgent"
    inputs: [:json]
    graph:
      version: 0.3
      nodes:
        prompt:
          agent: "stringTemplateAgent"
          params:
            template: > 
              以下を日本語で要約してください。200文字で。
              結果だけを回答すること。
              "${0}"
          # contoleは必須
          # console:
            # after: true
          # stringTemplateAgentのinputsは改行できない
          inputs: [:$0]
        llm:
          agent: groqAgent
          params:
            model: Llama3-70b-8192
          inputs: [:prompt]
        result_llm:
          agent: copyAgent
          inputs: [:llm.choices.$0.message.content]   
          # isResult: true
        summarize:
          agent: "stringTemplateAgent"
          params:
            template: "\e[31mまとめ:\e[0m ${0}\n"
          inputs: [:result_llm]
          # contoleは必須
          console:
            after: true