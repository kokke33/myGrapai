version: 0.3
# ループ処理
loop:
  # continueがTrueとなる間
  while: :continue
nodes:
  # 入力を確認
  continue:
    value: true
    update: :checkInput.continue
  # 入力
  userInput:
    agent: textInputAgent
    params:
      message: "悩める社員:"  
    console:
      before: "\e[1;32m■悩んでいること、相談したいことを教えてください:\e[0m"
  # 入力が「/bye」以外なら変数continueをtrueにする
  checkInput:
    agent: propertyFilterAgent
    params:
      inspect:
        - propId: continue
          notEqual: /bye
    inputs:
      - {}
      - :userInput     
  # 会話まとめ
  summary:
    value: []
    update: :matomeMessages
  matomeMessages:
    agent: stringTemplateAgent
    params:
      template: "\e[34m会話まとめ:\e[0m ${0}\n"
    # 画面出力しないためにコメントアウト
    # console:
    #   after: true
    inputs: [":nestedNode2.result_llm"]
    isResult: true

  # LLM渡すコンテキストレイアウト
  context:
    agent: stringTemplateAgent
    params:
      template:
        person0:
          name: プロジェクトマネージャ
          system: >
            あなたは数多くのプロジェクトを成功させてきたベテランの
            プロジェクトマネージャです。
            相談者の悩みを聞き、成功に導くのがあなたの仕事です。
            相談者を引き付けるために、一つ一つ質問を投げかけ、
            次の話題に移る前に、相談者の答えに対して反応してください。
            ただしシステム開発に関係する会話のみ受け付けるようにしてください。

            回答は以下3点注意してください。
            1.回答は100字以内であること。
            2.日本語であること。
            2.マークダウン形式は使わないこと。
            3.回答の中に改行は入れないこと。
            
            前回までの会話の流れは以下の通り。
            ${1}

        person1:
          name: 相談者
          system: >
            あなたは仕事に悩んでいるシステムエンジニアです。
            回答は以下3点注意してください。
            
            1.100字以内で、会話の文章として日本語で回答すること
            2.マークダウン形式は使わないこと。
            3.回答の中に改行は入れないこと。
          greeting: 私は ${0} について相談したい。
    inputs:
      - :userInput
      - :summary

  # messageの定義
  messages:
    agent: propertyFilterAgent
    params:
      inject:
        - index: 0
          propId: content
          from: 1
        - index: 1
          propId: content
          from: 2
    inputs:
      - - role: system
        - role: user
      - :context.person0.system
      - :context.person1.greeting

  #チャット本体
  chat:
    agent: nestedAgent
    # nestedAgentのインプットは２つあって、揃ってないと動かない
    inputs:
      - :messages
      - :context
    if: :checkInput.continue
    params:
      namedInputs:
        - messages
        - context
    # isResult: true
    
    # 入れ子の処理
    graph:
      loop:
        # ループ回数
        count: 7
      nodes:
        messages:
          value: []
          update: :swappedMessages
        context:
          value: {}
          update: :swappedContext
        llm:
          # agent: openAIAgent
          # params:
            # model: gpt-4o
            # model: gpt-3.5-turbo
          # agent: geminiAgent
          agent: groqAgent
          params:
            model: Llama3-70b-8192
            # model: Llama3-8b-8192
          inputs:
            - null
            - :messages
        output:
          agent: stringTemplateAgent
          params:
            template: "\e[34m>${1}:\e[0m ${0}\n"
          console:
            after: true
          inputs:
            - :llm.choices.$0.message.content
            - :context.person0.name

        reducer:
          agent: pushAgent
          inputs:
            - :messages
            - :llm.choices.$0.message
          isResult: true

        swappedContext:
          agent: propertyFilterAgent
          params:
            swap:
              person0: person1
          inputs:
            - :context
    
        swappedMessages:
          agent: propertyFilterAgent
          params:
            inject:
              - propId: content
                index: 0
                from: 1
            alter:
              role:
                assistant: user
                user: assistant
          inputs:
            - :reducer
            - :swappedContext.person0.system  

  # 最初のネストノードの結果をインプットにした処理
  nestedNode1_result:
    agent: "bypassAgent"
    inputs: [":chat.reducer"]

  # json形式のデータを元に戻す
  # ※次のnestedNode2で引数に与えられないため
  json:
    agent: jsonParserAgent
    params:
      stringify: true
    isResult: true
    inputs:
      - ":nestedNode1_result"

 # その結果を受けて、まとめの作成
  nestedNode2:
    agent: "mapAgent"
    inputs: [:json]
    graph:
      version: 0.3
      nodes:
        prompt:
          agent: "stringTemplateAgent"
          params:
            template: > 
              日本語で要約してください。
              文字数は200字程度で。
              要約の結果だけを回答すること。
              "${0}"
          inputs: [:$0]
        # まとめ用のLLM
        llm:
          # agent: openAIAgent
          # params:
          #   model: gpt-4o        
          # agent: geminiAgent
          agent: groqAgent
          params:
            model: Llama3-70b-8192
          inputs: [:prompt]
        result_llm:
          agent: copyAgent
          inputs: [:llm.choices.$0.message.content]   
          isResult: true
        summarize:
          agent: "stringTemplateAgent"
          params:
            template: "\e[31mまとめ:\e[0m ${0}\n"
          inputs: [:result_llm]
          console:
            after: true
        
 # その結果を受けて、次の質問の作成
  nestedNode3:
    agent: "mapAgent"
    inputs: [:json]
    if: :nestedNode2
    graph:
      version: 0.3
      nodes:
        prompt:
          agent: "stringTemplateAgent"
          params:
            template: > 
              userとassistantの会話をインプット情報として連携します。
              あなたはuserとして、会話の流れからuserが質問するであろう
              質問を５つ考えてください。
              余計なことは言わずに、結果だけを回答すること。
              50文字程度で日本語で。
              #インプット情報
              "${0}"
          inputs: [:$0]
        llm:
          agent: openAIAgent
          params:
            model: gpt-4o
          # agent: geminiAgent
          # agent: groqAgent
          # params:
          #   model: Llama3-70b-8192
          inputs: [:prompt]
        result_llm:
          agent: copyAgent
          inputs: [:llm.choices.$0.message.content]   
        summarize:
          agent: "stringTemplateAgent"
          params:
            template: "\e[31m【質問候補】【gpt-4o】:\e[0m\n${0}\n"
          inputs: [:result_llm]
          console:
            after: true
        
